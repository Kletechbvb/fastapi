# -*- coding: utf-8 -*-
"""question.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T6094pF0kLC_A8RcNyiyjX6CcQzi3rxx
"""

from fastapi import APIRouter
from pymongo import MongoClient
from bson import ObjectId
from datetime import datetime
import requests

# MongoDB setup (hardcoded)
MONGO_URI = "mongodb+srv://chatpdfxai_db_user:esfmQRoJQZpJ7if3@cluster0.xzatb0d.mongodb.net/chatpdf?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(MONGO_URI)
db = client["chatpdf"]
chats_collection = db["chats"]

# Gemini config (hardcoded)
GEMINI_API_KEY = "AIzaSyAYzx76osJSXZd61P15YHFbByolJ0j0Xo8"
MODEL_NAME = "gemini-2.5-flash"
GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/{MODEL_NAME}:generateContent"

router = APIRouter(prefix="/question", tags=["question"])

@router.get("/ask")
def ask_question(chat_id: str, question: str, onlycontext: bool = True):
    chat = chats_collection.find_one({"_id": ObjectId(chat_id)})
    if not chat:
        return {"status": "no_answer", "answer": "Chat not found ‚ùå"}

    context = chat["context"]

    if onlycontext:
        # STRICT: Answer only from context
        instruction = """
        You are a study assistant üìòüß†.
        RULES:
        ‚Ä¢ Answer ONLY from the CONTEXT given.
        ‚Ä¢ Use very simple and easy-to-understand language.
        ‚Ä¢ DO NOT add anything that is not in the CONTEXT.
        ‚Ä¢ If the answer is not in the CONTEXT, reply exactly:
          "‚ùå Sorry, I couldn‚Äôt find anything related in your uploads."
        """
    else:
        # Flexible: Can go beyond context if needed
        instruction = """
        You are a helpful and friendly study assistant üìòüß†.
        RULES:
        ‚Ä¢ Answer the QUESTION clearly in simple, easy language.
        ‚Ä¢ Add emojis where natural üòäüí°.
        ‚Ä¢ If needed, give short explanations to help understanding.
        ‚Ä¢ Be open to give any related or detailed information, 
          even if it‚Äôs not in the CONTEXT.
        ‚Ä¢ Keep it direct and easy to read.
        """

    user_prompt = f"""
    {instruction}

    CONTEXT:
    {context}

    QUESTION:
    {question}
    """

    payload = {"contents": [{"role": "user", "parts": [{"text": user_prompt}]}]}
    headers = {"Content-Type": "application/json", "x-goog-api-key": GEMINI_API_KEY}

    try:
        response = requests.post(GEMINI_API_URL, json=payload, headers=headers, timeout=60)
        response.raise_for_status()
        data = response.json()

        if "candidates" in data and len(data["candidates"]) > 0:
            answer = data["candidates"][0]["content"]["parts"][0]["text"].strip()
        else:
            answer = "‚ùå Sorry, I couldn‚Äôt find anything related."

        # Save user question + AI answer in history
        chats_collection.update_one(
            {"_id": ObjectId(chat_id)},
            {"$push": {"messages": {"role": "user", "text": question, "timestamp": datetime.utcnow().isoformat()}}}
        )
        chats_collection.update_one(
            {"_id": ObjectId(chat_id)},
            {"$push": {"messages": {"role": "assistant", "text": answer, "timestamp": datetime.utcnow().isoformat()}}}
        )

        return {
            "status": "answer" if not answer.startswith("‚ùå") else "no_answer",
            "answer": None if answer.startswith("‚ùå") else answer,
        }
    except Exception as e:
        return {"status": "no_answer", "answer": f"API error: {str(e)}"}
